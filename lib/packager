PACKAGER_LIB="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
: ${BASE_PATH:=${PACKAGER_LIB}/../..}

temp_directory=/tmp/_make_buildpack

if [ "$(uname)" == "Darwin" ]; then
    cache_directory="$(getconf DARWIN_USER_CACHE_DIR)/buildpack-packager"
elif [ "$(uname)" == "Linux" ]; then
    mkdir -p ~/.buildpack-packager/cache
    cache_directory=~/.buildpack-packager/cache
fi

function __print_usage {
    echo "Usage:"
    echo "  $0 [online|offline]"
    echo -e "\n\n  'offline' supports these options:"
    echo -e "\n    --use-cache\tcache or use cached downloads. This speeds up subsequent packaging significantly."
    exit 1
}

function __check_usage {
    if [ ${mode} == "online" ] && [ "${cache}" == false ]; then
      return
    fi

    if [ ${mode} == "offline" ]; then
        return
    fi

    __print_usage
}

function __parse_arguments {
    number_of_arguments=$#

    if [ "$2" == "--use-cache" ]; then
      cache=true
    else
      cache=false
    fi

    mode=$1
}

function __create_work_directory {
    old_dir=$(pwd)
    rm -rf ${temp_directory}
    mkdir ${temp_directory}
    mkdir -p ${cache_directory}
}

function __check_for_zip {
    which zip > /dev/null
    if [ "$?" -ne "0" ]; then
        echo "Zip not installed"
        echo "Try: apt-get install zip"
        echo "And then rerun: $@"
        exit 1
    fi
}

function __setup {
    __parse_arguments $@
    __check_usage
    __check_for_zip
    __create_work_directory
}

function __copy_buildpack_to_work_directory {
    cp -r ${BASE_PATH}/* ${temp_directory}
}

function __translate_url_to_filename {
    dependency_url=$1
    sed 's/[:\/]/_/g' <<< ${dependency_url}
}


function __download_dependency {
    url=$1
    filename=$(__translate_url_to_filename $url)

    if [ "$cache" == false ] || [ ! -f ${cache_directory}/${filename} ]; then
        curl $url -o ${cache_directory}/${filename} -L --fail

        if [ "$?" -ne "0" ] ; then
            echo "Cancelled packaging because of HTTP error when fetching ${url}"
            exit 1
        fi
    fi

    cp "${cache_directory}/${filename}" ./dependencies
}

function __package_dependencies {
    mkdir dependencies

    for dependency in ${dependencies[@]}; do
       __download_dependency ${dependency}
    done
}

function __create_symlink {
    from=$1
    to=$2

    pushd "${temp_directory}/dependencies" > /dev/null
    ln -v -s "${from}" "${to}"
    popd > /dev/null
}

function __build_symlinks {
    for symlink in ${symlinks[@]}; do
	from=$(echo $symlink | cut -d ':' -f1)
	to=$(echo $symlink | cut -d ':' -f2)
	if [ -z "$from" -o -z "$to" ] ; then
            echo "Cancelled packaging because symlinks syntax is wrong, should be /path/from:/path/to"
            exit 1
        fi
        __create_symlink ${from} ${to}
    done
}

function __build_zip_exclusion_string {
    zip_exclude_string=''
    for excluded_file in ${excluded_files[@]}
    do
       zip_exclude_string="$zip_exclude_string --exclude=*${excluded_file}*"
    done

    echo ${zip_exclude_string}
}

function __generate_filename {
    version=$(cat ${BASE_PATH}/VERSION)

    filename=${language}'_buildpack'

    if [[ ${mode} == 'offline' ]]; then
        filename=${filename}'-offline'
    fi

    filename=${filename}'-v'${version}
    filename=${filename}'.zip'

    echo ${filename}
}

function __zip_buildpack {
    zip_path=${BASE_PATH}/$(__generate_filename)
    rm ${zip_path} 2>/dev/null # this is faster than updating an existing zip
    zip --symlinks -r ${zip_path} ./ $(__build_zip_exclusion_string)
}

function __cleanup {
    cd ${old_dir}
    rm -rf ${temp_directory}
}

function package_buildpack {
    __setup $@

    __copy_buildpack_to_work_directory

    cd ${temp_directory}

    if [[ ${mode} == 'offline' ]]; then
        __package_dependencies
        __build_symlinks
    fi

    __zip_buildpack

    __cleanup
}

